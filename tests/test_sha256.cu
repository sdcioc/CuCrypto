#include <gtest/gtest.h>
#include <cuda_runtime.h>
#include <CuCrypto/sha256.cuh>

__global__ void sha256_kernel(const uint8_t* d_data, size_t length, uint8_t* d_hash) {
    CuCrypto::sha256::sha(d_data, length, d_hash);
}

TEST(Sha256Test, NullAssertionsGPU) {
    uint8_t data[32] = {0}; // Data array filled with zeroes
    uint8_t hash[32];

    // Allocate device memory
    uint8_t* d_data;
    uint8_t* d_hash;
    cudaMalloc(&d_data, sizeof(data));
    cudaMalloc(&d_hash, sizeof(hash));

    // Copy data to device
    cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);

    // Launch kernel
    sha256_kernel<<<1, 1>>>(d_data, 0, d_hash);
    cudaDeviceSynchronize();

    // Copy result back to host
    cudaMemcpy(hash, d_hash, sizeof(hash), cudaMemcpyDeviceToHost);

    // Expected hash value for an array of 32 zeroes
    uint8_t expected_hash[32] = {
        0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
        0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
        0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
        0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
    };

    for (int i = 0; i < 32; i++) {
        EXPECT_EQ(hash[i], expected_hash[i]);
    }

    // Free device memory
    cudaFree(d_data);
    cudaFree(d_hash);
}

TEST(Sha256Test, BasicAssertionsGPU) {
    uint8_t data[32] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20};
    uint8_t hash[32];

    // Allocate device memory
    uint8_t* d_data;
    uint8_t* d_hash;
    cudaMalloc(&d_data, sizeof(data));
    cudaMalloc(&d_hash, sizeof(hash));

    // Copy data to device
    cudaMemcpy(d_data, data, sizeof(data), cudaMemcpyHostToDevice);

    // Launch kernel
    sha256_kernel<<<1, 1>>>(d_data, 32, d_hash);
    cudaDeviceSynchronize();

    // Copy result back to host
    cudaMemcpy(hash, d_hash, sizeof(hash), cudaMemcpyDeviceToHost);

    // Expected hash value (example, replace with actual expected value)
    uint8_t expected_hash[32] = {
        0xae, 0x21, 0x6c, 0x2e, 0xf5, 0x24, 0x7a, 0x37,
        0x82, 0xc1, 0x35, 0xef, 0xa2, 0x79, 0xa3, 0xe4,
        0xcd, 0xc6, 0x10, 0x94, 0x27, 0x0f, 0x5d, 0x2b,
        0xe5, 0x8c, 0x62, 0x04, 0xb7, 0xa6, 0x12, 0xc9
    };

    for (int i = 0; i < 32; i++) {
        EXPECT_EQ(hash[i], expected_hash[i]);
    }

    // Free device memory
    cudaFree(d_data);
    cudaFree(d_hash);
}

TEST(Sha256Test, NullAssertions) {
    uint8_t data[32] = {0};
    uint8_t hash[32];
    CuCrypto::sha256::sha(data, 0, hash);

    // Expected hash value (example, replace with actual expected value)
    uint8_t expected_hash[32] = {
        0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14,
        0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
        0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c,
        0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
    };

    for (int i = 0; i < 32; i++) {
        EXPECT_EQ(hash[i], expected_hash[i]);
    }
}

TEST(Sha256Test, BasicAssertions) {
    uint8_t data[32] = {0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20};
    uint8_t hash[32];
    CuCrypto::sha256::sha(data, 32, hash);

    // Expected hash value (example, replace with actual expected value)
    uint8_t expected_hash[32] = {
        0xae, 0x21, 0x6c, 0x2e, 0xf5, 0x24, 0x7a, 0x37,
        0x82, 0xc1, 0x35, 0xef, 0xa2, 0x79, 0xa3, 0xe4,
        0xcd, 0xc6, 0x10, 0x94, 0x27, 0x0f, 0x5d, 0x2b,
        0xe5, 0x8c, 0x62, 0x04, 0xb7, 0xa6, 0x12, 0xc9
    };

    for (int i = 0; i < 32; i++) {
        EXPECT_EQ(hash[i], expected_hash[i]);
    }
}